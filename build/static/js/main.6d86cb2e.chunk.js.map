{"version":3,"sources":["App.js","reportWebVitals.js","Redux/Reducers/post.reducer.js","Redux/Reducers/index.js","Redux/store.js","serviceWorkerRegistration.js","index.js","Redux/constants.js"],"names":["Loadable","Component","props","fallback","AboutUsPage","React","lazy","DoneteUs","HomePage","News","Header","Footer","Gallery","FloatingMenu2","App","className","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initState","error","message","getPostInfo","loading","getAllProduct","count","rows","rootReducer","combineReducers","post","state","action","type","postContants","RESET_STATE","VIEW_ALL_POST_REQUEST","VIEW_ALL_POST_SUCCESS","console","log","payload","VIEW_ALL_POST_FAILURE","VIEW_POST_REQUEST","VIEW_POST_SUCCESS","postInfo","store","createStore","composeWithDevTools","applyMiddleware","thunk","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","VIEW_POST_FAILURE"],"mappings":"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","file":"static/js/main.6d86cb2e.chunk.js","sourcesContent":["// import './App.css';\nimport React, { Suspense, lazy } from \"react\";\nimport { Routes, Route } from \"react-router\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n// import HomePage from \"./page/HomePage\";\nimport \"./style/aboutUsMtextView.css\";\nimport \"./style/buttoncss.css\";\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\nimport {\n  BrowserView,\n  MobileView,\n  isBrowser,\n  isMobile,\n} from \"react-device-detect\";\nimport \"./style/buttoncss.css\";\nconst Loadable = (Component) => (props) =>\n  (\n    <Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </Suspense>\n  );\nconst AboutUsPage = Loadable(\n  React.lazy(() => import(\"./components/AboutUs/AboutUsPage\"))\n);\nconst DoneteUs = Loadable(React.lazy(() => import(\"./page/DoneteUs\")));\nconst HomePage = Loadable(React.lazy(() => import(\"./page/HomePage\")));\nconst News = Loadable(React.lazy(() => import(\"./page/News\")));\nconst Header = Loadable(\n  React.lazy(() => import(\"./components/layout/Header/Header\"))\n);\nconst Footer = Loadable(\n  React.lazy(() => import(\"./components/layout/Footer/Footer\"))\n);\nconst Gallery = Loadable(React.lazy(() => import(\"./page/Gallery\")));\n\nconst FloatingMenu2 = Loadable(\n  React.lazy(() => import(\"./components/layout/FloatingBTN/FloatingMenu2\"))\n);\nconst AboutUsSangathan = Loadable(\n  React.lazy(() =>\n    import(\"./components/HomePage/AboutUsSangathan/AboutUsSangathan\")\n  )\n);\nconst App = (props) => {\n  return (\n    <div className=\"App\">\n      <MobileView>\n        <FloatingMenu2 />\n      </MobileView>\n      <Header />\n      <Routes>\n        <Route path=\"/\" element={<HomePage />} />\n        <Route path=\"/Gallery\" element={<Gallery />} />\n        <Route path=\"/AboutUs\" element={<AboutUsPage />} />\n        <Route path=\"/News\" element={<News />} />\n        <Route path=\"/DonateUs\" element={<DoneteUs />} />\n      </Routes>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { postContants } from \"../constants\";\n\nconst initState = {\n  error: null,\n  message: \"\",\n  getPostInfo: {},\n  loading: false,\n  getAllProduct: {\n    count: null,\n    rows: [],\n  },\n};\n\nexport default (state = initState, action) => {\n  switch (action.type) {\n    case postContants.RESET_STATE:\n      state = initState;\n      break;\n    case postContants.VIEW_ALL_POST_REQUEST:\n      state = {\n        ...state,\n        loading: true,\n      };\n      break;\n    case postContants.VIEW_ALL_POST_SUCCESS:\n      console.log(action);\n      state = {\n        ...state,\n        loading: false,\n        getAllProduct: {\n          count: action.payload.count,\n          rows: action.payload.rows,\n        },\n      };\n      break;\n    case postContants.VIEW_ALL_POST_FAILURE:\n      state = {\n        ...state,\n        loading: false,\n        error: action.payload.error,\n        message: null,\n      };\n      break;\n\n    case postContants.VIEW_POST_REQUEST:\n      state = {\n        ...state,\n        loading: true,\n        getPostInfo: {},\n      };\n      break;\n    case postContants.VIEW_POST_SUCCESS:\n      console.log(\"waiting\");\n      state = {\n        ...state,\n        loading: false,\n        getPostInfo: action.payload.postInfo,\n      };\n  }\n\n  return state;\n};\n","import { combineReducers } from \"redux\";\n\nimport postReducer from \"./post.reducer\";\n\nconst rootReducer = combineReducers({\n  post: postReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport rootReducer from './Reducers/index'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\r\n\r\nexport default store\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { HashRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./Redux/store\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const postContants = {\n  VIEW_POST_REQUEST: \"VIEW_POST_REQUEST\",\n  VIEW_POST_FAILURE: \"VIEW_POST_FAILURE\",\n  VIEW_POST_SUCCESS: \"VIEW_POST_SUCCESS\",\n\n  VIEW_ALL_POST_REQUEST: \"VIEW_ALL_POST_REQUEST\",\n  VIEW_ALL_POST_FAILURE: \"VIEW_ALL_POST_FAILURE\",\n  VIEW_ALL_POST_SUCCESS: \"VIEW_ALL_POST_SUCCESS\",\n\n  RESET_STATE: \"RESET_STATE\",\n};\n"],"sourceRoot":""}